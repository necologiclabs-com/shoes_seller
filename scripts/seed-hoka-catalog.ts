/**
 * HOKA„ÅÆË£ΩÂìÅ„Ç´„Çø„É≠„Ç∞„ÇíDynamoDB„Å´ÁôªÈå≤
 */

import { DynamoDBClient } from '@aws-sdk/client-dynamodb';
import { DynamoDBDocumentClient, PutCommand } from '@aws-sdk/lib-dynamodb';
import { randomUUID } from 'crypto';
import { HOKA_TRAIL_CATALOG } from '../lambda/layers/shared/nodejs/hoka-catalog';

const client = new DynamoDBClient({ region: 'ap-northeast-1' });
const docClient = DynamoDBDocumentClient.from(client);
const TABLE_NAME = 'PriceComparisonTable';

async function seedHokaProducts() {
    console.log('üèÉ Seeding HOKA trail running shoes to DynamoDB...\n');

    let newCount = 0;
    let updatedCount = 0;
    let skippedCount = 0;

    for (const catalogProduct of HOKA_TRAIL_CATALOG) {
        try {
            // Êó¢Â≠ò„ÅÆË£ΩÂìÅ„ÇíÁ¢∫Ë™çÔºàmodelNumber„ÅßÊ§úÁ¥¢Ôºâ
            const existingProducts = await findProductByModelNumber(catalogProduct.modelNumber);

            if (existingProducts.length > 0) {
                // Êó¢Â≠òË£ΩÂìÅ„ÇíÊõ¥Êñ∞
                const existingProduct = existingProducts[0] as { PK: string; SK: string; imageUrl?: string; createdAt?: string };
                console.log(`üìù Updating: ${catalogProduct.name} (${catalogProduct.modelNumber})`);

                await docClient.send(new PutCommand({
                    TableName: TABLE_NAME,
                    Item: {
                        PK: existingProduct.PK,
                        SK: existingProduct.SK,
                        GSI1PK: 'BRAND#HOKA',
                        GSI1SK: `PRODUCT#${existingProduct.PK.replace('PRODUCT#', '')}`,
                        id: existingProduct.PK.replace('PRODUCT#', ''),
                        brand: 'HOKA',
                        productName: `HOKA ${catalogProduct.name}`,
                        modelNumber: catalogProduct.modelNumber,
                        category: catalogProduct.category,
                        gender: catalogProduct.gender,
                        description: catalogProduct.description,
                        officialUrl: catalogProduct.officialUrl,
                        imageUrl: existingProduct.imageUrl, // Êó¢Â≠ò„ÅÆÁîªÂÉèURL„Çí‰øùÊåÅ
                        updatedAt: new Date().toISOString(),
                        createdAt: existingProduct.createdAt || new Date().toISOString(),
                    }
                }));

                updatedCount++;
                console.log(`   ‚úÖ Updated successfully`);
            } else {
                // Êñ∞Ë¶èË£ΩÂìÅ„Çí‰ΩúÊàê
                const productId = randomUUID();
                console.log(`‚ûï Creating: ${catalogProduct.name} (${catalogProduct.modelNumber})`);

                await docClient.send(new PutCommand({
                    TableName: TABLE_NAME,
                    Item: {
                        PK: `PRODUCT#${productId}`,
                        SK: 'METADATA',
                        GSI1PK: 'BRAND#HOKA',
                        GSI1SK: `PRODUCT#${productId}`,
                        id: productId,
                        brand: 'HOKA',
                        productName: `HOKA ${catalogProduct.name}`,
                        modelNumber: catalogProduct.modelNumber,
                        category: catalogProduct.category,
                        gender: catalogProduct.gender,
                        description: catalogProduct.description,
                        officialUrl: catalogProduct.officialUrl,
                        // imageUrl„ÅØ‰æ°Ê†ºÊõ¥Êñ∞ÊôÇ„Å´Ëá™ÂãïÂèñÂæó„Åï„Çå„Çã
                        createdAt: new Date().toISOString(),
                        updatedAt: new Date().toISOString(),
                    }
                }));

                newCount++;
                console.log(`   ‚úÖ Created with ID: ${productId}`);
            }

        } catch (error) {
            console.error(`‚ùå Error processing ${catalogProduct.name}:`, error);
            skippedCount++;
        }

        console.log();
    }

    console.log('üìä Summary:');
    console.log(`   Total: ${HOKA_TRAIL_CATALOG.length}`);
    console.log(`   New: ${newCount}`);
    console.log(`   Updated: ${updatedCount}`);
    console.log(`   Skipped: ${skippedCount}`);
}

/**
 * „É¢„Éá„É´Áï™Âè∑„ÅßË£ΩÂìÅ„ÇíÊ§úÁ¥¢
 */
async function findProductByModelNumber(modelNumber: string): Promise<Record<string, unknown>[]> {
    // ÂÖ®Ë£ΩÂìÅ„Çí„Çπ„Ç≠„É£„É≥„Åó„Å¶modelNumber„Åå‰∏ÄËá¥„Åô„Çã„ÇÇ„ÅÆ„ÇíÊé¢„Åô
    // ÔºàÊú¨Áï™Áí∞Â¢É„Åß„ÅØGSI„Çí‰Ωø„ÅÜ„Åπ„Åç„Å†„Åå„ÄÅ„Åì„Åì„Åß„ÅØ„Ç∑„É≥„Éó„É´„Å´ÂÆüË£ÖÔºâ
    const { DynamoDBClient } = await import('@aws-sdk/client-dynamodb');
    const { ScanCommand } = await import('@aws-sdk/client-dynamodb');
    const { unmarshall } = await import('@aws-sdk/util-dynamodb');

    const client = new DynamoDBClient({ region: 'ap-northeast-1' });

    const result = await client.send(new ScanCommand({
        TableName: TABLE_NAME,
        FilterExpression: 'modelNumber = :modelNumber AND SK = :sk',
        ExpressionAttributeValues: {
            ':modelNumber': { S: modelNumber },
            ':sk': { S: 'METADATA' }
        }
    }));

    return (result.Items || []).map(item => unmarshall(item));
}

seedHokaProducts().catch(console.error);
